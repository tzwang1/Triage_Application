Design Description

This design will contain 5 classes: Patient, VitalSigns, Symptoms, PatientDatabase, and GUI.

The triage application mainly revolves around accessing and manipulating the PatientDatabase class. When the application is accessed by authorized users, the application will load a text file which contains a list of patients are their respective information. The PatientDatabase class will also be able to save the list of patients to a text file.

A patient will have the following attributes: name (string), birthdate (date), health card number (int), arrival time (date), vital signs (list), symptoms (list), urgency (int), date/time seen by doctor (date), and status (string). If the date/time seen by doctor is empty and does not contain a date/time value, then the patient has not been seen by a doctor yet. The urgency of a patient will be categorized with an integer from 1 to 4 based on the hospital policy using the patient’s age and most recent vital sign records (temperature, blood pressure, heart rate). Each of the attributes in the patient class will be private to control access. Public getter and setter methods will be used to access these fields. The list of vital signs, and list of symptoms will be sorted from earliest recording to latest recording.

The symptoms class will contain the attributes: description (string), and time (date). Nurses can update a patient’s symptoms using the update symptoms method in the patient class. This will allow them to input a string description, and the new symptom description will be appended to the patient’s list of symptom descriptions, along with the time.

The vital signs class will contain the following fields: temperature (double), blood pressure (int), heart rate (int), and time (date).This will allow the nurses to view current data, as well as older data. To record new vital signs, the update vital signs method will append new vital signs data to the patient’s list of vital signs. Each time vital signs are updated, the patient’s urgency will be recalculated, and their status will be changed to “improving” or “worsening”. 

The PatientDatabase object will consist of a sorted list of patients by arrival time. This design of a sorted list is to reduce the time needed to retrieve a list sorted by arrival time. The choice of sorting by arrival time over urgency is because arrival time would not be normally changed after initially entered unlike urgency which is regularly updated. This reduces the amount of effort required to maintain the integrity of the sorted list. If the user instead wants a list sorted and categorized by urgency, the application would then return a list of three elements, each another list sorted by urgency as well with the three elements of differing urgency levels. The list structure can be replaced with more optimized structures such as a Map which stores the patient’s (unique) health card number as the key.

The GUI class will be the main method, and will contain all aspects of the user interface. There will be buttons to save data, load data, update vital signs, update symptoms, view list of patients, and sort list of patients. There will also be an option to look up a patient’s record based on their health card number.