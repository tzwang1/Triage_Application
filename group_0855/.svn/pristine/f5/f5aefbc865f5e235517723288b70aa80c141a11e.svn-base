package com.triageapplication;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.StreamCorruptedException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;

import android.app.Activity;
import android.content.Intent;
import android.content.res.AssetManager;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import com.model.NoRecordedDataException;
import com.model.Patient;
import com.model.PatientDatabase;
import com.triageapplication.R.id;

public class MainActivity extends Activity {
	public static final String PATIENT_RECORDS = "patient_records.txt";

	private PatientDatabase pd;
	private ArrayList<Patient> pList;
	private final ArrayList<String> patientStringList = new ArrayList<String>();
	private ArrayAdapter<String> adapter;
	private ListView lv;
	private String userType;
	private boolean sorted = false;

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onCreate(android.os.Bundle)
	 * 
	 * Intent extras: "user" : User; the corresponding user account which is
	 * currently logged in
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		this.getWindow().setSoftInputMode(
				WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
		userType = this.getIntent().getStringExtra("userType");
		lv = (ListView) findViewById(id.patient_list);

		if (userType.equals("physician")) {
			Button button = (Button) findViewById(id.addPatient);
			button.setVisibility(View.GONE);
			button = (Button) findViewById(id.sort_patient_by_urgency);
			button.setVisibility(View.GONE);
			ListView lv = (ListView) findViewById(id.patient_list);
			lv.setVisibility(View.GONE);
		}
	}
	
	@Override
	public void onBackPressed() {
	}

	@Override
	public void onResume() {
		super.onResume();

		// As file:///android_asset/patient_records.txt is not writable,
		// copy it to app writable folder to append new patient.
		File outFile = new File(getFilesDir(), PATIENT_RECORDS);
		if (!outFile.exists()) {
			// run once only during life time
			copyInitPatientRecord(outFile);
		}

		// Load PatientDatabase from app writable folder (as new patients might
		// be appended to outFile)
		// After the main page resumes, new patients may be added to
		// PATIENT_RECORDS
		try {
			BufferedReader bufferedReader = new BufferedReader(new FileReader(
					outFile));
			pd = new PatientDatabase(bufferedReader);
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException("Failed to read Patient database");
		}
		pList = pd.getPatientList();

		// find previous .log entries and overwrite the records just found from
		// the bufferedReader
		FileInputStream fis;
		ObjectInputStream is;
		Patient pat;
		for (int i = 0; i < pList.size(); i++) {
			try {
				pat = pList.get(i);
				fis = this.openFileInput(pat.getHealthCardNumber() + ".log");
				is = new ObjectInputStream(fis);
				pd.replacePatient(pat.getHealthCardNumber(),
						(Patient) is.readObject());
				continue;
			} catch (FileNotFoundException e) {
			} catch (StreamCorruptedException e) {
			} catch (IOException e) {
			} catch (ClassNotFoundException e) {
			}
		}

		pList = pd.getPatientList();

		// clean for latest PatientList
		patientStringList.clear();

		for (Patient p : pList) {
			patientStringList.add(p.getName() + "\n" + p.getHealthCardNumber());
		}
		adapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_list_item_1, patientStringList);

		lv.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parentView, View childView,
					int position, long id) {
				submit(patientStringList.get(position).split("\n")[1]);
			}
		});
		lv.setAdapter(adapter);
		adapter.notifyDataSetChanged();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		// Also generates a PatientDatabase object using the given
		// patient_records.txt file.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	public void submitPatient(View view) {
		// Attempts to add a patient, if the given health card number does not
		// match any patient in pd then the given health card number is treated
		// as an invalid health card number.
		EditText et = (EditText) findViewById(id.healthCardField);
		submit(et.getText().toString());
	}

	private void submit(String hcNumber) {
		Intent intent = new Intent(this, PatientActivity.class);
		try {
			intent.putExtra("patient", pd.retreivePatient(hcNumber));
		} catch (NoRecordedDataException e) {
			Toast.makeText(MainActivity.this, "Invalid health card number.",
					Toast.LENGTH_SHORT).show();
			return;
		}
		intent.putExtra("userType", userType);
		startActivity(intent);

	}

	public void addPatient(View view) {
		Intent intent = new Intent(this, NewPatientActivity.class);
		intent.putExtra("userType", userType);
		startActivity(intent);
	}

	public void sortPatientByUrgency(View view) {

		ArrayList<Patient> sortedList;
		if (!sorted) {
			sortedList = pd.sortListByUrgency();
			System.out.println("Patients sorted!");
		} else {
			sortedList = pd.getPatientList();
		}

		patientStringList.clear();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		for (Patient p : sortedList) {
			patientStringList.add(p.getName() + "\n" + p.getHealthCardNumber()
					+ "\n" + sdf.format(p.getDob().getTime()));
			try {
				System.out.println(p.getName() + ": " + p.getUrgency());
			} catch (NoRecordedDataException e) {
				e.printStackTrace();
			}
		}
		if (!sorted) {
			Collections.reverse(patientStringList);
		}

		// adapter.clear();

		// adapter.addAll(patientStringList);
		sorted = !sorted;
		adapter.notifyDataSetChanged();

	}

	public void logout(View view) {
		Intent intent = new Intent(this, UserLogin.class);
		startActivity(intent);
	}

	/**
	 * As file:///android_asset/patient_records.txt is not writable, copy it to
	 * app writable folder to append new patient.
	 * 
	 */
	private void copyInitPatientRecord(File outFile) {
		AssetManager assetManager = getAssets();

		InputStream in = null;
		OutputStream out = null;
		try {
			in = assetManager.open(PATIENT_RECORDS);
			out = new FileOutputStream(outFile);

			byte[] buffer = new byte[1024];
			int read;
			while ((read = in.read(buffer)) != -1) {
				out.write(buffer, 0, read);
			}
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException(
					"Failed to copy PATIENT_RECORDS to app writable folder");
		} finally {
			if (in != null) {
				try {
					in.close();
					in = null;
				} catch (IOException e) {
				}
			}
			if (out != null) {
				try {
					out.close();
					out = null;
				} catch (IOException e) {
				}
			}
		}
	}
}
